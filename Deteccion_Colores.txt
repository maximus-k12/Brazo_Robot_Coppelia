# importamos las librerías necesarias
import sim
import numpy as np
import sys
import time
import cv2
import numpy as np
import matplotlib.pyplot as plt
#----------------------- Modulo de CoppeliaSim-----------------------
def connect(port):
    sim.simxFinish(-1) # just in case, close all opened connections
    clientID=sim.simxStart('127.0.0.1',port,True,True,2000,5) # Conectarse
    if clientID == 0: print("conectado a", port)
    else: print("no se pudo conectar")
    return clientID
clientID = connect(19999)
#--------------------- Conexion con el Scrip-------------------------
#Guardamos el handle de la cámara del robot (el 'Vision_sensor')
error_cam, camara = sim.simxGetObjectHandle(clientID, 'Camara', sim.simx_opmode_oneshot_wait)
#Capturamos un cuadro  para activar la cámara y esperamos 1 segundo:
_, resolution, image = sim.simxGetVisionSensorImage(clientID, camara, 0, sim.simx_opmode_streaming)
time.sleep(1)

#---------------------- Variable para los colores--------------------------
#cap = cv2.VideoCapture(0)

redBajo1 = np.array([0, 100, 20], np.uint8)
redAlto1 = np.array([8, 255, 255], np.uint8)

redBajo2=np.array([175, 100, 20], np.uint8)
redAlto2=np.array([179, 255, 255], np.uint8)

while (1):
    #------ Variable que controlan el Scrip en CoppeliaSim -------------------
    _, resolution, image = sim.simxGetVisionSensorImage(clientID, camara, 0, sim.simx_opmode_buffer) #Capturamos un cuadro de imaden de la cámara del robot. Guardamos la imagen y su resolución:
    #---------- Modificacion de imagen para el uso de Open ----------------------
    img = np.array(image, dtype = np.uint8) #La convertimos a un array de numpy
    img.resize([resolution[0], resolution[1], 3]) #Cambiamos sus dimensiones
    img = np.rot90(img,2) #La rotamos 90 grados para enderezarla
    img = np.fliplr(img) #La invertimos
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #Cambiamos su espacio de color de RGB a BGR
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    canny = cv2.Canny(gray, 10, 150)
    canny = cv2.dilate(canny, None, iterations=1)
    canny = cv2.erode(canny, None, iterations=1)
    cnts,_ = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)# OpenCV 4

    #-------------------Funciones de OpenCv Para maskara del Espacio HVS--------------------------------------
    frameHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)#Conversion de Imagen a HSV
    maskRed1 = cv2.inRange(frameHSV, redBajo1, redAlto1)#Seleccion del rango del color
    maskRed2 = cv2.inRange(frameHSV, redBajo2, redAlto2)#Seleccion del rango del color
    maskRed = cv2.add(maskRed1, maskRed2) #Adicion de dos las dos mascaras
    maskRedvis = cv2.bitwise_and(img, img, mask= maskRed)        

    #------------------------- Visualizacion de imagen ---------------------------------
    cv2.imshow('maskRedvis', maskRedvis) #Visualizacion de imagen solo en el color Rojo

    #----------------------------- Cierre de ventana--------------------------------------
    if cv2.waitKey(1) & 0xFF == ord('s'):
        break
cap.release()
cv2.destroyAllWindows()